@NonCPS
def getOldSha() {
    if (Jenkins.instance.getItemByFullName("${env.JOB_NAME}").lastSuccessfulBuild == null)
    {
      echo 'Since no last successful build was found, setting old_sha value to NONE'
      env['old_sha'] = 'NONE'
    }
    else
    {
    echo 'Collecting sha value from last successful build'
    sha_val = Jenkins.instance.getItemByFullName("${env.JOB_NAME}").lastSuccessfulBuild.actions.find{ it instanceof ParametersAction }?.parameters.find{it.name == 'sha'}?.value
    env['old_sha'] = sha_val
    }
}

def jobparams = [
    [$class:'StringParameterValue',name:'TEFLO_BRANCH',value:"${TEFLO_BRANCH}"]
]

pipeline {
  agent { label "${AGENT}" }
  stages {

      stage('Previous Build Commit ID') {
          steps {
                  getOldSha()
                  script {

                  echo "Old sha from last successful build is: ${env.old_sha}"
                  echo "New sha is: ${env.sha}"

              }
          }
      }

      stage ('check_sha') {

        when {
          not {
            equals actual: "${env.sha ?: 'NONE'}", expected: "${env.old_sha}"
          }
        }
        steps {
            script {
            def jobs = [:]

            ['teflo-include-e2e-test-linchpin-wrapper-2',
            'teflo-include-e2e-test-beaker-client-2',
            'teflo-include-e2e-test-linchpin-wrapper-3',
            'teflo-e2e-beaker-py3',
            'teflo-include-e2e-test-openstack-libcloud-3'].each{
                i -> jobs["CI-JOB-${i}"] = {
                    build job: "${i}",
                    propagate:true,
                    parameters: jobparams

                }
            }
            parallel jobs
          }

      }
  }
}

} //pipeline
